class Book(models.Model):
  title = models.CharField(max_length=225)
  desc = models.TextField()
  created_at = models.DateTimeField(auto_now_add=True)
  updated_at = models.DateTimeField(auto_now=True)
  
  def __str__(self):
    return f'{self.title}'
  
class Author(models.Model):
  first_name = models.CharField(max_length=225)
  last_name = models.CharField(max_length=225)
  notes =  models.TextField()
  books = models.ManyToManyField(Book,related_name="authors")
  created_at = models.DateTimeField(auto_now_add=True)
  updated_at = models.DateTimeField(auto_now=True)
  def __str__(self):
    return f'{self.first_name}'




>>> from books_authors_app.models import *
>>> Book.objects.create(title="C Sharp")
<Book: C Sharp>

>>> Book.objects.create(title="Java")
<Book: Java>

>>> Book.objects.create(title="Python")
<Book: Python>

>>> Book.objects.create(title="PHP")
<Book: PHP>

>>> Book.objects.create(title="Ruby")
<Book: Ruby>

>>> Author.objects.create(first_name="Jane",last_name="Austen")
<Author: Jane>

>>> Author.objects.create(first_name="Emily",last_name=
"Dickinson")
<Author: Emily>

>>> Author.objects.create(first_name="Fyodor",last_name
="Dostoevsky")
<Author: Fyodor>

>>> Author.objects.create(first_name="William",last_nam
e="Shakespeare")
<Author: William>

>>> Author.objects.create(first_name="lau",last_name="S
Tzu")
<Author: lau>


(djangoPy3Env) C:\Users\joude\OneDrive\Desktop\FullStuck\PYTHON _DJANGO_PT_AXSOS\django\Django_ORM\books_authors_proj>python manage.py makemigrations
It is impossible to add a non-nullable field 'notes' to author without specifying a default. This is because the database needs something to populate existing rows.
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit and manually define a default value in models.py.
Select an option: 1
Please enter the default value as valid Python.
The datetime and django.utils.timezone modules are available, so it is possible to provide e.g. timezone.now as a value.
Type 'exit' to exit this prompt
>>> 0
Migrations for 'books_authors_app':
  books_authors_app\migrations\0002_author_notes.py
    - Add field notes to author

(djangoPy3Env) C:\Users\joude\OneDrive\Desktop\FullStuck\PYTHON _DJANGO_PT_AXSOS\django\Django_ORM\books_authors_proj>python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, books_authors_app, contenttypes, sessions
Running migrations:
  Applying books_authors_app.0002_author_notes... OK


>>> csharp = Book.objects.get(title="C Sharp")
>>> csharp.title="C#"
>>> csharp.save()
print(csharp)
C#

>>> author = Author.objects.get(first_name='William', last_name='Shakespeare')
>>> author.first_name = 'Bill'
>>> author.save()
>>> print (author)
Bill


>>> assign_first_author = Author.objects.get(id=18)
>>> book_1 = Book.objects.get(id=14)
>>> assign_first_author.books.add(book_1)
>>> book_2 = Book.objects.get(id=15)
>>> assign_first_author.books.add(book_2)

>>> assign_second_author = Author.objects.get(id=19)
>>> assign_second_author.books.add(book_1)
>>> assign_second_author.books.add(book_2)
>>> book_3 = Book.objects.get(id=16)
>>> assign_second_author.books.add(book_3)


>>> assign_third_author = Author.objects.get(id=20)
>>> book_4 = Book.objects.get(id=17)
>>> assign_third_author.books.add(book_1)
>>> assign_third_author.books.add(book_2)
>>> assign_third_author.books.add(book_3)
>>> assign_third_author.books.add(book_4)



>>> assign_fourth_author = Author.objects.get(id=21)
>>> assign_fourth_author.books.add(book_1)
>>> assign_fourth_author.books.add(book_2)
>>> assign_fourth_author.books.add(book_3)
>>> assign_fourth_author.books.add(book_4)


>>> book_fourth = Book.objects.get(id=17)
>>> print(book_fourth.authors.all())
<QuerySet [<Author: Fyodor>, <Author: Bill>]>

>>> book_fourth = Book.objects.get(id=16)
>>> print(book_fourth.authors.all())
<QuerySet [<Author: Emily>, <Author: Fyodor>, <Author: Bill>]>

>>> first_author = Author.objects.get(id=18)
>>> book_third = Book.objects.get(id=16)
>>> book_fourth.authors.remove(first_author)

>>> fifth_author = Author.objects.get(id=22)
>>> book_second = Book.objects.get(id=15)
>>> book_second.authors.add(fifth_author)

>>> third_author = Author.objects.get(id=20)
>>> print(third_author.books.all())
<QuerySet [<Book: C#>, <Book: Python>, <Book: PHP>]>

>>> book_fifth = Book.objects.get(id=22)
>>> book_fifth = Book.objects.get(id=18)
>>> print(book_fifth.authors.all())
<QuerySet []>


